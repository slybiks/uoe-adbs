package ed.inf.adbs.minibase.base.operators;

import ed.inf.adbs.minibase.Utils;
import ed.inf.adbs.minibase.base.Tuple;

import java.io.FileWriter;
import java.io.IOError;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * An abstract class that represents a relational operator in the query processing pipeline.
 */
public abstract class Operator {
    /**
     * Get the next tuple from the operator.
     *
     * @return the next tuple from the operator
     */
    public abstract Tuple getNextTuple();

    /**
     * Reset the operator to its initial state.
     */
    public abstract void reset();

    /**
     * Dumps the tuples generated by the operator to an output file or to the console.
     *
     * @throws IOError if an I/O error occurs while writing the tuples to the output file.
     */
    public void dump() {
        Tuple relationalTuple;
        FileWriter outputFileWriter = Utils.getFileWriter();
        try {
            while ((relationalTuple = getNextTuple()) != null) {
                if (outputFileWriter != null) {
                    String relationalTupleString = Utils.join(relationalTuple.getRelationalTerms(), ", ");
                    outputFileWriter.write(relationalTupleString + System.lineSeparator());
                } else {
                    System.out.println(relationalTuple);
                }
            }
            if (outputFileWriter != null) {
                outputFileWriter.flush();
            }
        } catch (IOException e) {
            System.err.println("Error writing tuples : " + e.getMessage());
            throw new IOError(e.getCause());
        }
    }

    /**
     * Concatenates two lists of operators and returns the resulting list.
     *
     * @param firstOperatorList  the first list of operators to concatenate.
     * @param secondOperatorList the second list of operators to concatenate.
     * @param <T>                the type of the first list of operators.
     * @param <U>                the type of the second list of operators.
     * @return the concatenated list of operators.
     */
    public static <T extends Operator, U extends Operator> List<Operator> concatenateLists(final List<T> firstOperatorList, final List<U> secondOperatorList) {
        return Stream.concat(firstOperatorList.stream(), secondOperatorList.stream()).collect(Collectors.toList());
    }
}
